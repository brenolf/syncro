(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Game = require('./Game');

var _Game2 = _interopRequireDefault(_Game);

var _Splash = require('./Splash');

var _Splash2 = _interopRequireDefault(_Splash);

var _Preload = require('./Preload');

var _Preload2 = _interopRequireDefault(_Preload);

var _Boot = require('./Boot');

var _Boot2 = _interopRequireDefault(_Boot);

var _GameOver = require('./GameOver');

var _GameOver2 = _interopRequireDefault(_GameOver);

var _About = require('./About');

var _About2 = _interopRequireDefault(_About);

var _Kraiom = require('./Kraiom');

var _Kraiom2 = _interopRequireDefault(_Kraiom);

var GAME_DATA = require('../../json/game');

window.GAME = function (handler) {
  Phaser.Game.prototype.GAME_DATA = GAME_DATA;

  var game = new Phaser.Game(GAME_DATA.width, GAME_DATA.height, Phaser.CANVAS, handler.target);

  game.state.add('boot', _Boot2['default']);
  game.state.add('preload', _Preload2['default']);
  game.state.add('splash', _Splash2['default']);
  game.state.add('game', _Game2['default']);
  game.state.add('gameover', _GameOver2['default']);
  game.state.add('about', _About2['default']);
  game.state.add('kraiom', _Kraiom2['default']);

  game.state.start('boot', true, false, handler);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29CQUFpQixRQUFROzs7O3NCQUNOLFVBQVU7Ozs7dUJBQ1QsV0FBVzs7OztvQkFDZCxRQUFROzs7O3dCQUNKLFlBQVk7Ozs7cUJBQ2YsU0FBUzs7OztzQkFDUixVQUFVOzs7O0FBRTdCLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBOztBQUU1QyxNQUFNLENBQUMsSUFBSSxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQy9CLFFBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7O0FBRTNDLE1BQUksSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FDeEIsU0FBUyxDQUFDLEtBQUssRUFDZixTQUFTLENBQUMsTUFBTSxFQUNoQixNQUFNLENBQUMsTUFBTSxFQUNiLE9BQU8sQ0FBQyxNQUFNLENBQ2YsQ0FBQTs7QUFFRCxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLG9CQUFPLENBQUE7QUFDNUIsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyx1QkFBVSxDQUFBO0FBQ2xDLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsc0JBQVMsQ0FBQTtBQUNoQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLG9CQUFPLENBQUE7QUFDNUIsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSx3QkFBVyxDQUFBO0FBQ3BDLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8scUJBQVEsQ0FBQTtBQUM5QixNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLHNCQUFTLENBQUE7O0FBRWhDLE1BQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0NBQy9DLENBQUEiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL3N0YXRlcy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdhbWUgZnJvbSAnLi9HYW1lJ1xuaW1wb3J0IFNwbGFzaCBmcm9tICcuL1NwbGFzaCdcbmltcG9ydCBQcmVsb2FkIGZyb20gJy4vUHJlbG9hZCdcbmltcG9ydCBCb290IGZyb20gJy4vQm9vdCdcbmltcG9ydCBHYW1lT3ZlciBmcm9tICcuL0dhbWVPdmVyJ1xuaW1wb3J0IEFib3V0IGZyb20gJy4vQWJvdXQnXG5pbXBvcnQgS3JhaW9tIGZyb20gJy4vS3JhaW9tJ1xuXG5jb25zdCBHQU1FX0RBVEEgPSByZXF1aXJlKCcuLi8uLi9qc29uL2dhbWUnKVxuXG53aW5kb3cuR0FNRSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gIFBoYXNlci5HYW1lLnByb3RvdHlwZS5HQU1FX0RBVEEgPSBHQU1FX0RBVEFcblxuICBsZXQgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZShcbiAgICBHQU1FX0RBVEEud2lkdGgsXG4gICAgR0FNRV9EQVRBLmhlaWdodCxcbiAgICBQaGFzZXIuQ0FOVkFTLFxuICAgIGhhbmRsZXIudGFyZ2V0XG4gIClcblxuICBnYW1lLnN0YXRlLmFkZCgnYm9vdCcsIEJvb3QpXG4gIGdhbWUuc3RhdGUuYWRkKCdwcmVsb2FkJywgUHJlbG9hZClcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3NwbGFzaCcsIFNwbGFzaClcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2dhbWUnLCBHYW1lKVxuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZW92ZXInLCBHYW1lT3ZlcilcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2Fib3V0JywgQWJvdXQpXG4gIGdhbWUuc3RhdGUuYWRkKCdrcmFpb20nLCBLcmFpb20pXG5cbiAgZ2FtZS5zdGF0ZS5zdGFydCgnYm9vdCcsIHRydWUsIGZhbHNlLCBoYW5kbGVyKVxufVxuIl19
},{"../../json/game":19,"./About":9,"./Boot":10,"./Game":11,"./GameOver":12,"./Kraiom":13,"./Preload":14,"./Splash":15}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _bind = Function.prototype.bind;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _objectsRectangle = require('../objects/Rectangle');

var _objectsRectangle2 = _interopRequireDefault(_objectsRectangle);

var GAME = require('../../json/game.json');

var Maze = (function () {
  function Maze(context) {
    _classCallCheck(this, Maze);

    this.context = context;

    this.paddles = {
      R: context.game.add.physicsGroup(),
      L: context.game.add.physicsGroup()
    };

    this.last = {
      R: null,
      L: null
    };

    this.populate();
  }

  _createClass(Maze, [{
    key: 'populate',
    value: function populate() {
      this._populate();
      this._populate(false);
    }
  }, {
    key: '_populate',
    value: function _populate() {
      var first = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      var j = first ? 0 : 1;

      var PADDLE = first ? 'L' : 'R';

      for (var i = 0; i < GAME.INIT_PADDLES; i++) {
        var GO_LEFT = Math.random() < 0.5;

        var MIDDLE_BLOCK = Math.random() < 0.3;

        var MOVING = false;

        var PLUS = Math.floor(Math.random() * 170) + 100;

        var BASE = this.last[PADDLE] === null ? 0 : this.last[PADDLE].y;

        var T = BASE - PLUS + Math.floor(Math.random() * Math.min(this.context.ELAPSED, 30));

        var W = 50 + Math.floor(Math.random() * 50) + Math.floor(Math.random() * Math.min(this.context.ELAPSED, 30));

        var L = this.context.rails[j].LB.x + this.context.rails[j].LB.width / 2 + (GO_LEFT ? 0 : this.context.rails[j].T.width - W);

        if (MIDDLE_BLOCK) {
          MOVING = Math.random() < 0.3;

          W = 20 + Math.floor(Math.random() * 60) + Math.floor(Math.random() * Math.min(this.context.ELAPSED * 2, 50));

          L = this.context.rails[j].LB.x + this.context.rails[j].LB.width / 2 + this.context.rails[j].T.width / 2 - (MOVING ? 0 : Math.floor(W / 2));
        }

        var color = GAME.borderB;

        if (this.context.players[j].active) {
          color = GAME.borderA;
        }

        var data = [W, this.context.rails[j].LB.width, L, T];

        var paddle = new (_bind.apply(_objectsRectangle2['default'], [null].concat([this.context, color], data, [this.paddles[PADDLE]])))();

        paddle.anchor.set(0, 0);

        this.context.game.physics.arcade.enable(paddle);

        if (MOVING) {
          paddle.body.angularVelocity = 15;
          paddle.anchor.set(0.5, 0.5);
        }

        paddle.checkWorldBounds = true;

        paddle.body.immovable = true;

        paddle.events.onOutOfBounds.add(this.vanished, paddle);

        this.last[PADDLE] = paddle;

        if (i === GAME.INIT_PADDLES - 5 && first) {
          paddle._populate = this.populate.bind(this);
        }
      }
    }
  }, {
    key: 'accelerate',
    value: function accelerate() {
      this.paddles.L.setAll('body.velocity.y', this.context.VELOCITY);
      this.paddles.R.setAll('body.velocity.y', this.context.VELOCITY);
    }
  }, {
    key: 'swap',
    value: function swap() {
      this.paddles.L.callAll('swap');
      this.paddles.R.callAll('swap');
    }
  }, {
    key: 'update',
    value: function update() {
      this.context.game.physics.arcade.collide(this.context.players[0], this.paddles.L, this.context.lose, null, this.context);

      this.context.game.physics.arcade.collide(this.context.players[1], this.paddles.R, this.context.lose, null, this.context);
    }

    // paddle is the context
  }, {
    key: 'vanished',
    value: function vanished() {
      if (this.y >= 0) {
        if (this._populate) {
          this._populate();
        }

        this.kill();
        this.destroy();
      }
    }
  }]);

  return Maze;
})();

exports['default'] = Maze;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../json/game.json":19,"../objects/Rectangle":7}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _objectsCircle = require('../objects/Circle');

var _objectsCircle2 = _interopRequireDefault(_objectsCircle);

var GAME = require('../../json/game.json');

var SIZE = 20;

var MARGIN = 40;

var Player = (function (_Circle) {
  _inherits(Player, _Circle);

  function Player(context, center) {
    var main = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    _classCallCheck(this, Player);

    var colors = main ? GAME.playerA : GAME.playerB;

    _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this, context, colors, 16, center.x, center.y - SIZE - MARGIN);

    this.active = main;

    this.context = context;

    context.game.physics.arcade.enable(this);
  }

  _createClass(Player, [{
    key: 'swap',
    value: function swap() {
      this.active = !this.active;

      _get(Object.getPrototypeOf(Player.prototype), 'swap', this).call(this);
    }
  }]);

  return Player;
})(_objectsCircle2['default']);

exports['default'] = Player;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9lbGVtZW50cy9QbGF5ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFBbUIsbUJBQW1COzs7O0FBRXRDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBOztBQUU1QyxJQUFNLElBQUksR0FBRyxFQUFFLENBQUE7O0FBRWYsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBOztJQUVJLE1BQU07WUFBTixNQUFNOztBQUNiLFdBRE8sTUFBTSxDQUNaLE9BQU8sRUFBRSxNQUFNLEVBQWU7UUFBYixJQUFJLHlEQUFHLElBQUk7OzBCQUR0QixNQUFNOztBQUV2QixRQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBOztBQUVqRCwrQkFKaUIsTUFBTSw2Q0FJakIsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxNQUFNLEVBQUM7O0FBRTlELFFBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBOztBQUVsQixRQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTs7QUFFdEIsV0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUN6Qzs7ZUFYa0IsTUFBTTs7V0FhcEIsZ0JBQUc7QUFDTixVQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTs7QUFFMUIsaUNBaEJpQixNQUFNLHNDQWdCWDtLQUNiOzs7U0FqQmtCLE1BQU07OztxQkFBTixNQUFNIiwiZmlsZSI6Ii9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9lbGVtZW50cy9QbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2lyY2xlIGZyb20gJy4uL29iamVjdHMvQ2lyY2xlJ1xuXG5jb25zdCBHQU1FID0gcmVxdWlyZSgnLi4vLi4vanNvbi9nYW1lLmpzb24nKVxuXG5jb25zdCBTSVpFID0gMjBcblxuY29uc3QgTUFSR0lOID0gNDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ2lyY2xlIHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQsIGNlbnRlciwgbWFpbiA9IHRydWUpIHtcbiAgICBjb25zdCBjb2xvcnMgPSBtYWluID8gR0FNRS5wbGF5ZXJBIDogR0FNRS5wbGF5ZXJCXG5cbiAgICBzdXBlcihjb250ZXh0LCBjb2xvcnMsIDE2LCBjZW50ZXIueCwgY2VudGVyLnkgLSBTSVpFIC0gTUFSR0lOKVxuXG4gICAgdGhpcy5hY3RpdmUgPSBtYWluXG5cbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0XG5cbiAgICBjb250ZXh0LmdhbWUucGh5c2ljcy5hcmNhZGUuZW5hYmxlKHRoaXMpXG4gIH1cblxuICBzd2FwICgpIHtcbiAgICB0aGlzLmFjdGl2ZSA9ICF0aGlzLmFjdGl2ZVxuXG4gICAgc3VwZXIuc3dhcCgpXG4gIH1cbn1cbiJdfQ==
},{"../../json/game.json":19,"../objects/Circle":5}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _bind = Function.prototype.bind;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _objectsRectangle = require('../objects/Rectangle');

var _objectsRectangle2 = _interopRequireDefault(_objectsRectangle);

var GAME = require('../../json/game.json');

var Rail = (function () {
  function Rail(context) {
    var main = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, Rail);

    this.context = context;

    var border = main ? GAME.borderA : GAME.borderB;
    var trail = main ? GAME.trailA : GAME.trailB;

    this.active = main;

    var pos = this._computePosition();

    this.LB = new (_bind.apply(_objectsRectangle2['default'], [null].concat([context, border], _toConsumableArray(pos.LB))))();
    this.RB = new (_bind.apply(_objectsRectangle2['default'], [null].concat([context, border], _toConsumableArray(pos.RB))))();
    this.T = new (_bind.apply(_objectsRectangle2['default'], [null].concat([context, trail], _toConsumableArray(pos.T))))();

    context.game.physics.arcade.enable([this.LB, this.RB, this.T]);

    this.LB.body.immovable = true;
    this.RB.body.immovable = true;
    this.T.body.immovable = true;
  }

  _createClass(Rail, [{
    key: 'swap',
    value: function swap() {
      this.active = !this.active;

      this.LB.swap();
      this.RB.swap();
      this.T.swap();
    }
  }, {
    key: '_computePosition',
    value: function _computePosition() {
      var MARGIN = Math.floor(GAME.width * 0.2);

      var TOTAL_W = Math.floor(GAME.width * 0.2);

      var BORDER_W = Math.floor(TOTAL_W * 0.05 / 2);
      var TRAIL_W = Math.floor(TOTAL_W - BORDER_W);

      var H = this.context.game.height;
      var HH = Math.floor(H / 2);

      var ADJ = this.active ? 0 : MARGIN + 1.5 * BORDER_W + TRAIL_W;

      return {
        LB: [BORDER_W, H, ADJ + MARGIN, HH],
        RB: [BORDER_W, H, ADJ + MARGIN + BORDER_W + TRAIL_W, HH],
        T: [TRAIL_W, H, ADJ + MARGIN + BORDER_W / 2 + TRAIL_W / 2, HH]
      };
    }
  }, {
    key: 'basis',
    get: function get() {
      return {
        x: Math.floor(this.T.body.center.x - this.T.body.width / 2),
        y: this.T.body.height
      };
    }
  }]);

  return Rail;
})();

exports['default'] = Rail;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9lbGVtZW50cy9SYWlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztnQ0FBc0Isc0JBQXNCOzs7O0FBRTVDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBOztJQUV2QixJQUFJO0FBQ1gsV0FETyxJQUFJLENBQ1YsT0FBTyxFQUFlO1FBQWIsSUFBSSx5REFBRyxJQUFJOzswQkFEZCxJQUFJOztBQUVyQixRQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTs7QUFFdEIsUUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQTtBQUNqRCxRQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBOztBQUU5QyxRQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQTs7QUFFbEIsUUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUE7O0FBRW5DLFFBQUksQ0FBQyxFQUFFLGtFQUFpQixPQUFPLEVBQUUsTUFBTSxzQkFBSyxHQUFHLENBQUMsRUFBRSxNQUFDLENBQUE7QUFDbkQsUUFBSSxDQUFDLEVBQUUsa0VBQWlCLE9BQU8sRUFBRSxNQUFNLHNCQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQUMsQ0FBQTtBQUNuRCxRQUFJLENBQUMsQ0FBQyxrRUFBaUIsT0FBTyxFQUFFLEtBQUssc0JBQUssR0FBRyxDQUFDLENBQUMsTUFBQyxDQUFBOztBQUVoRCxXQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQ2pDLElBQUksQ0FBQyxFQUFFLEVBQ1AsSUFBSSxDQUFDLEVBQUUsRUFDUCxJQUFJLENBQUMsQ0FBQyxDQUNQLENBQUMsQ0FBQTs7QUFFRixRQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO0FBQzdCLFFBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7QUFDN0IsUUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtHQUM3Qjs7ZUF4QmtCLElBQUk7O1dBaUNsQixnQkFBRztBQUNOLFVBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBOztBQUUxQixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ2QsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUNkLFVBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDZDs7O1dBRWdCLDRCQUFHO0FBQ2xCLFVBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQTs7QUFFM0MsVUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFBOztBQUU1QyxVQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEFBQUMsT0FBTyxHQUFHLElBQUksR0FBSSxDQUFDLENBQUMsQ0FBQTtBQUNqRCxVQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQTs7QUFFOUMsVUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0FBQ2xDLFVBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBOztBQUU1QixVQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUE7O0FBRS9ELGFBQU87QUFDTCxVQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLEVBQUUsRUFBRSxDQUFDO0FBQ25DLFVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsT0FBTyxFQUFFLEVBQUUsQ0FBQztBQUN4RCxTQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxPQUFPLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztPQUMvRCxDQUFBO0tBQ0Y7OztTQWpDUyxlQUFHO0FBQ1gsYUFBTztBQUNMLFNBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUMzRCxTQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtPQUN0QixDQUFBO0tBQ0Y7OztTQS9Ca0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL2VsZW1lbnRzL1JhaWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVjdGFuZ2xlIGZyb20gJy4uL29iamVjdHMvUmVjdGFuZ2xlJ1xuXG5jb25zdCBHQU1FID0gcmVxdWlyZSgnLi4vLi4vanNvbi9nYW1lLmpzb24nKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYWlsIHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQsIG1haW4gPSB0cnVlKSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuXG4gICAgY29uc3QgYm9yZGVyID0gbWFpbiA/IEdBTUUuYm9yZGVyQSA6IEdBTUUuYm9yZGVyQlxuICAgIGNvbnN0IHRyYWlsID0gbWFpbiA/IEdBTUUudHJhaWxBIDogR0FNRS50cmFpbEJcblxuICAgIHRoaXMuYWN0aXZlID0gbWFpblxuXG4gICAgY29uc3QgcG9zID0gdGhpcy5fY29tcHV0ZVBvc2l0aW9uKClcblxuICAgIHRoaXMuTEIgPSBuZXcgUmVjdGFuZ2xlKGNvbnRleHQsIGJvcmRlciwgLi4ucG9zLkxCKVxuICAgIHRoaXMuUkIgPSBuZXcgUmVjdGFuZ2xlKGNvbnRleHQsIGJvcmRlciwgLi4ucG9zLlJCKVxuICAgIHRoaXMuVCA9IG5ldyBSZWN0YW5nbGUoY29udGV4dCwgdHJhaWwsIC4uLnBvcy5UKVxuXG4gICAgY29udGV4dC5nYW1lLnBoeXNpY3MuYXJjYWRlLmVuYWJsZShbXG4gICAgICB0aGlzLkxCLFxuICAgICAgdGhpcy5SQixcbiAgICAgIHRoaXMuVFxuICAgIF0pXG5cbiAgICB0aGlzLkxCLmJvZHkuaW1tb3ZhYmxlID0gdHJ1ZVxuICAgIHRoaXMuUkIuYm9keS5pbW1vdmFibGUgPSB0cnVlXG4gICAgdGhpcy5ULmJvZHkuaW1tb3ZhYmxlID0gdHJ1ZVxuICB9XG5cbiAgZ2V0IGJhc2lzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5mbG9vcih0aGlzLlQuYm9keS5jZW50ZXIueCAtIHRoaXMuVC5ib2R5LndpZHRoIC8gMiksXG4gICAgICB5OiB0aGlzLlQuYm9keS5oZWlnaHRcbiAgICB9XG4gIH1cblxuICBzd2FwICgpIHtcbiAgICB0aGlzLmFjdGl2ZSA9ICF0aGlzLmFjdGl2ZVxuXG4gICAgdGhpcy5MQi5zd2FwKClcbiAgICB0aGlzLlJCLnN3YXAoKVxuICAgIHRoaXMuVC5zd2FwKClcbiAgfVxuXG4gIF9jb21wdXRlUG9zaXRpb24gKCkge1xuICAgIGNvbnN0IE1BUkdJTiA9IE1hdGguZmxvb3IoR0FNRS53aWR0aCAqIDAuMilcblxuICAgIGNvbnN0IFRPVEFMX1cgPSBNYXRoLmZsb29yKEdBTUUud2lkdGggKiAwLjIpXG5cbiAgICBjb25zdCBCT1JERVJfVyA9IE1hdGguZmxvb3IoKFRPVEFMX1cgKiAwLjA1KSAvIDIpXG4gICAgY29uc3QgVFJBSUxfVyA9IE1hdGguZmxvb3IoVE9UQUxfVyAtIEJPUkRFUl9XKVxuXG4gICAgY29uc3QgSCA9IHRoaXMuY29udGV4dC5nYW1lLmhlaWdodFxuICAgIGNvbnN0IEhIID0gTWF0aC5mbG9vcihIIC8gMilcblxuICAgIGNvbnN0IEFESiA9IHRoaXMuYWN0aXZlID8gMCA6IE1BUkdJTiArIDEuNSAqIEJPUkRFUl9XICsgVFJBSUxfV1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIExCOiBbQk9SREVSX1csIEgsIEFESiArIE1BUkdJTiwgSEhdLFxuICAgICAgUkI6IFtCT1JERVJfVywgSCwgQURKICsgTUFSR0lOICsgQk9SREVSX1cgKyBUUkFJTF9XLCBISF0sXG4gICAgICBUOiBbVFJBSUxfVywgSCwgQURKICsgTUFSR0lOICsgQk9SREVSX1cgLyAyICsgVFJBSUxfVyAvIDIsIEhIXVxuICAgIH1cbiAgfVxufVxuIl19
},{"../../json/game.json":19,"../objects/Rectangle":7}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Shape2 = require('./Shape');

var _Shape3 = _interopRequireDefault(_Shape2);

var Circle = (function (_Shape) {
  _inherits(Circle, _Shape);

  function Circle(context, color, circumference, x, y, group) {
    _classCallCheck(this, Circle);

    var radius = circumference / 2;

    var builder = function builder() {
      this.arc(radius, radius, radius, 0, 2 * Math.PI);
    };

    _get(Object.getPrototypeOf(Circle.prototype), 'constructor', this).call(this, context, color, circumference, circumference, x, y, builder, group);
  }

  return Circle;
})(_Shape3['default']);

exports['default'] = Circle;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9vYmplY3RzL0NpcmNsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztzQkFBa0IsU0FBUzs7OztJQUVOLE1BQU07WUFBTixNQUFNOztBQUNiLFdBRE8sTUFBTSxDQUNaLE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFOzBCQUR0QyxNQUFNOztBQUV2QixRQUFNLE1BQU0sR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFBOztBQUVoQyxRQUFNLE9BQU8sR0FBRyxTQUFWLE9BQU8sR0FBZTtBQUMxQixVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQ2pELENBQUE7O0FBRUQsK0JBUmlCLE1BQU0sNkNBUWpCLE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUM7R0FDMUU7O1NBVGtCLE1BQU07OztxQkFBTixNQUFNIiwiZmlsZSI6Ii9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9vYmplY3RzL0NpcmNsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaGFwZSBmcm9tICcuL1NoYXBlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaXJjbGUgZXh0ZW5kcyBTaGFwZSB7XG4gIGNvbnN0cnVjdG9yIChjb250ZXh0LCBjb2xvciwgY2lyY3VtZmVyZW5jZSwgeCwgeSwgZ3JvdXApIHtcbiAgICBjb25zdCByYWRpdXMgPSBjaXJjdW1mZXJlbmNlIC8gMlxuXG4gICAgY29uc3QgYnVpbGRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuYXJjKHJhZGl1cywgcmFkaXVzLCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJKVxuICAgIH1cblxuICAgIHN1cGVyKGNvbnRleHQsIGNvbG9yLCBjaXJjdW1mZXJlbmNlLCBjaXJjdW1mZXJlbmNlLCB4LCB5LCBidWlsZGVyLCBncm91cClcbiAgfVxufVxuIl19
},{"./Shape":8}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Drawing = (function (_Phaser$BitmapData) {
  _inherits(Drawing, _Phaser$BitmapData);

  function Drawing(game, width, height, color, builder) {
    _classCallCheck(this, Drawing);

    _get(Object.getPrototypeOf(Drawing.prototype), "constructor", this).call(this, game, null, width, height);

    this.game = game;

    this.ctx.beginPath();

    builder.apply(this.ctx);

    this.ctx.fillStyle = color;
    this.ctx.fill();
  }

  return Drawing;
})(Phaser.BitmapData);

exports["default"] = Drawing;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9vYmplY3RzL0RyYXdpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQXFCLE9BQU87WUFBUCxPQUFPOztBQUNkLFdBRE8sT0FBTyxDQUNiLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7MEJBRC9CLE9BQU87O0FBRXhCLCtCQUZpQixPQUFPLDZDQUVsQixJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUM7O0FBRWhDLFFBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBOztBQUVoQixRQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFBOztBQUVwQixXQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFdkIsUUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO0FBQzFCLFFBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7R0FDaEI7O1NBWmtCLE9BQU87R0FBUyxNQUFNLENBQUMsVUFBVTs7cUJBQWpDLE9BQU8iLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL29iamVjdHMvRHJhd2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYXdpbmcgZXh0ZW5kcyBQaGFzZXIuQml0bWFwRGF0YSB7XG4gIGNvbnN0cnVjdG9yIChnYW1lLCB3aWR0aCwgaGVpZ2h0LCBjb2xvciwgYnVpbGRlcikge1xuICAgIHN1cGVyKGdhbWUsIG51bGwsIHdpZHRoLCBoZWlnaHQpXG5cbiAgICB0aGlzLmdhbWUgPSBnYW1lXG5cbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuXG4gICAgYnVpbGRlci5hcHBseSh0aGlzLmN0eClcblxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGNvbG9yXG4gICAgdGhpcy5jdHguZmlsbCgpXG4gIH1cbn1cbiJdfQ==
},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Shape2 = require('./Shape');

var _Shape3 = _interopRequireDefault(_Shape2);

var Rectangle = (function (_Shape) {
  _inherits(Rectangle, _Shape);

  function Rectangle(context, color, W, H, x, y, group) {
    _classCallCheck(this, Rectangle);

    var builder = function builder() {
      this.rect(0, 0, W, H);
    };

    _get(Object.getPrototypeOf(Rectangle.prototype), 'constructor', this).call(this, context, color, W, H, x, y, builder, group);
  }

  return Rectangle;
})(_Shape3['default']);

exports['default'] = Rectangle;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9vYmplY3RzL1JlY3RhbmdsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztzQkFBa0IsU0FBUzs7OztJQUVOLFNBQVM7WUFBVCxTQUFTOztBQUNoQixXQURPLFNBQVMsQ0FDZixPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUU7MEJBRDdCLFNBQVM7O0FBRTFCLFFBQU0sT0FBTyxHQUFHLFNBQVYsT0FBTyxHQUFlO0FBQzFCLFVBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7S0FDdEIsQ0FBQTs7QUFFRCwrQkFOaUIsU0FBUyw2Q0FNcEIsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQztHQUNsRDs7U0FQa0IsU0FBUzs7O3FCQUFULFNBQVMiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL29iamVjdHMvUmVjdGFuZ2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNoYXBlIGZyb20gJy4vU2hhcGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY3RhbmdsZSBleHRlbmRzIFNoYXBlIHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQsIGNvbG9yLCBXLCBILCB4LCB5LCBncm91cCkge1xuICAgIGNvbnN0IGJ1aWxkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnJlY3QoMCwgMCwgVywgSClcbiAgICB9XG5cbiAgICBzdXBlcihjb250ZXh0LCBjb2xvciwgVywgSCwgeCwgeSwgYnVpbGRlciwgZ3JvdXApXG4gIH1cbn1cbiJdfQ==
},{"./Shape":8}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Drawing = require('./Drawing');

var _Drawing2 = _interopRequireDefault(_Drawing);

var Shape = (function (_Phaser$Sprite) {
  _inherits(Shape, _Phaser$Sprite);

  function Shape(context, colors, W, H, x, y, builder, group) {
    _classCallCheck(this, Shape);

    var drawing = new _Drawing2['default'](context.game, W, H, colors[0], builder);
    var opposite = new _Drawing2['default'](context.game, W, H, colors[1], builder);

    group = group || context.game.world;

    _get(Object.getPrototypeOf(Shape.prototype), 'constructor', this).call(this, context.game, x, y, drawing);

    this._textures = [drawing, opposite];
    this._current = 0;

    this.anchor.set(0.5, 0.5);
    group.add(this);
  }

  _createClass(Shape, [{
    key: 'swap',
    value: function swap() {
      this._current = (this._current + 1) % 2;

      this.loadTexture(this._textures[this._current]);
    }
  }]);

  return Shape;
})(Phaser.Sprite);

exports['default'] = Shape;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9vYmplY3RzL1NoYXBlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBQW9CLFdBQVc7Ozs7SUFFVixLQUFLO1lBQUwsS0FBSzs7QUFDWixXQURPLEtBQUssQ0FDWCxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFOzBCQUR2QyxLQUFLOztBQUV0QixRQUFNLE9BQU8sR0FBRyx5QkFBWSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ25FLFFBQU0sUUFBUSxHQUFHLHlCQUFZLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUE7O0FBRXBFLFNBQUssR0FBRyxLQUFLLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7O0FBRW5DLCtCQVBpQixLQUFLLDZDQU9oQixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFDOztBQUVsQyxRQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQ3BDLFFBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFBOztBQUVqQixRQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDekIsU0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUNoQjs7ZUFka0IsS0FBSzs7V0FnQm5CLGdCQUFHO0FBQ04sVUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFBOztBQUV2QyxVQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7S0FDaEQ7OztTQXBCa0IsS0FBSztHQUFTLE1BQU0sQ0FBQyxNQUFNOztxQkFBM0IsS0FBSyIsImZpbGUiOiIvVXNlcnMvYnJlbm9saW1hZGVmcmVpdGFzL3N5bmNyby9zcmMvanMvb2JqZWN0cy9TaGFwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEcmF3aW5nIGZyb20gJy4vRHJhd2luZydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcGUgZXh0ZW5kcyBQaGFzZXIuU3ByaXRlIHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQsIGNvbG9ycywgVywgSCwgeCwgeSwgYnVpbGRlciwgZ3JvdXApIHtcbiAgICBjb25zdCBkcmF3aW5nID0gbmV3IERyYXdpbmcoY29udGV4dC5nYW1lLCBXLCBILCBjb2xvcnNbMF0sIGJ1aWxkZXIpXG4gICAgY29uc3Qgb3Bwb3NpdGUgPSBuZXcgRHJhd2luZyhjb250ZXh0LmdhbWUsIFcsIEgsIGNvbG9yc1sxXSwgYnVpbGRlcilcblxuICAgIGdyb3VwID0gZ3JvdXAgfHwgY29udGV4dC5nYW1lLndvcmxkXG5cbiAgICBzdXBlcihjb250ZXh0LmdhbWUsIHgsIHksIGRyYXdpbmcpXG5cbiAgICB0aGlzLl90ZXh0dXJlcyA9IFtkcmF3aW5nLCBvcHBvc2l0ZV1cbiAgICB0aGlzLl9jdXJyZW50ID0gMFxuXG4gICAgdGhpcy5hbmNob3Iuc2V0KDAuNSwgMC41KVxuICAgIGdyb3VwLmFkZCh0aGlzKVxuICB9XG5cbiAgc3dhcCAoKSB7XG4gICAgdGhpcy5fY3VycmVudCA9ICh0aGlzLl9jdXJyZW50ICsgMSkgJSAyXG5cbiAgICB0aGlzLmxvYWRUZXh0dXJlKHRoaXMuX3RleHR1cmVzW3RoaXMuX2N1cnJlbnRdKVxuICB9XG59XG4iXX0=
},{"./Drawing":6}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var COLOR = require('../../json/game.json').active.player;

var styling = {
  font: 'Lato',
  fontSize: '72px',
  fontWeight: 100,
  fill: '#ffffff'
};

var button_style = {
  font: 'Lato',
  fontSize: '28px',
  fontWeight: 100,
  fill: '#ffffff'
};

var text_style_2 = {
  font: 'Lato',
  fontSize: '24px',
  fontWeight: 100,
  fill: '#ffffff'
};

var text_style = {
  font: 'Lato',
  fontSize: '18px',
  fontWeight: 100,
  fill: '#ffffff',
  wordWrap: true,
  wordWrapWidth: 430
};

var button_style_over = {
  font: 'Lato',
  fontSize: '28px',
  fontWeight: 100,
  fill: COLOR
};

var About = (function () {
  function About() {
    _classCallCheck(this, About);
  }

  _createClass(About, [{
    key: 'preload',
    value: function preload() {
      this.tic = this.game.add.audio('tic');
      this.tic.volume = 0.2;
    }
  }, {
    key: 'create',
    value: function create() {
      var _this = this;

      var title = this.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'S   Y   N   C   R   O', styling);

      var back = this.add.text(this.game.world.width - 100, 40, 'b a c k', button_style);

      var cc = this.add.text(30, 250, 'Assets licensed under Creative Commons:\n      By Attribution 3.0 License (creativecommons.org/licenses/by/3.0/)\n\n      - "Rhinoceros" Kevin MacLeod (incompetech.com)\n      - "korgpoly800bs C6" patchen (freesound.org)\n      - "Mute Icon" Visual Pharm (icons8.com)\n      - "Medium, volume icon" Visual Pharm (icons8.com)', text_style);

      this.add.text(450, 250, 'Copyright © 2016\n\n      Breno Freitas (breno.io)\n      Eduardo Rocha (@romaoneles)', text_style_2);

      back.inputEnabled = true;
      back.input.useHandCursor = true;

      back.events.onInputDown.add(function () {
        _this.state.start('splash', true, false);
      });

      back.events.onInputOver.add(function () {
        back.setStyle(button_style_over);
        _this.tic.play();
      });

      back.events.onInputOut.add(function () {
        back.setStyle(button_style);
      });

      title.anchor.setTo(0.5);
      back.anchor.setTo(0.5);
    }
  }]);

  return About;
})();

exports['default'] = About;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvQWJvdXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7O0FBRTNELElBQU0sT0FBTyxHQUFHO0FBQ2QsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxTQUFTO0NBQ2hCLENBQUE7O0FBRUQsSUFBTSxZQUFZLEdBQUc7QUFDbkIsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxTQUFTO0NBQ2hCLENBQUE7O0FBRUQsSUFBTSxZQUFZLEdBQUc7QUFDbkIsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxTQUFTO0NBQ2hCLENBQUE7O0FBRUQsSUFBTSxVQUFVLEdBQUc7QUFDakIsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxTQUFTO0FBQ2YsVUFBUSxFQUFFLElBQUk7QUFDZCxlQUFhLEVBQUUsR0FBRztDQUNuQixDQUFBOztBQUVELElBQU0saUJBQWlCLEdBQUc7QUFDeEIsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxLQUFLO0NBQ1osQ0FBQTs7SUFFb0IsS0FBSztXQUFMLEtBQUs7MEJBQUwsS0FBSzs7O2VBQUwsS0FBSzs7V0FDaEIsbUJBQUc7QUFDVCxVQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNyQyxVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUE7S0FDdEI7OztXQUVNLGtCQUFHOzs7QUFDUixVQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUM3Qix1QkFBdUIsRUFDdkIsT0FBTyxDQUNSLENBQUE7O0FBRUQsVUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQzNCLEVBQUUsRUFDRixTQUFTLEVBQ1QsWUFBWSxDQUNiLENBQUE7O0FBRUQsVUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ3RCLEVBQUUsRUFDRixHQUFHLDBVQVFILFVBQVUsQ0FDWCxDQUFBOztBQUVELFVBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUNYLEdBQUcsRUFDSCxHQUFHLDJGQUtILFlBQVksQ0FDYixDQUFBOztBQUVELFVBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO0FBQ3hCLFVBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQTs7QUFFL0IsVUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQU07QUFDaEMsY0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7T0FDeEMsQ0FBQyxDQUFBOztBQUVGLFVBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFNO0FBQ2hDLFlBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNoQyxjQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtPQUNoQixDQUFDLENBQUE7O0FBRUYsVUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQU07QUFDL0IsWUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtPQUM1QixDQUFDLENBQUE7O0FBRUYsV0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDdkIsVUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDdkI7OztTQTlEa0IsS0FBSzs7O3FCQUFMLEtBQUsiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL3N0YXRlcy9BYm91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENPTE9SID0gcmVxdWlyZSgnLi4vLi4vanNvbi9nYW1lLmpzb24nKS5hY3RpdmUucGxheWVyXG5cbmNvbnN0IHN0eWxpbmcgPSB7XG4gIGZvbnQ6ICdMYXRvJyxcbiAgZm9udFNpemU6ICc3MnB4JyxcbiAgZm9udFdlaWdodDogMTAwLFxuICBmaWxsOiAnI2ZmZmZmZidcbn1cblxuY29uc3QgYnV0dG9uX3N0eWxlID0ge1xuICBmb250OiAnTGF0bycsXG4gIGZvbnRTaXplOiAnMjhweCcsXG4gIGZvbnRXZWlnaHQ6IDEwMCxcbiAgZmlsbDogJyNmZmZmZmYnXG59XG5cbmNvbnN0IHRleHRfc3R5bGVfMiA9IHtcbiAgZm9udDogJ0xhdG8nLFxuICBmb250U2l6ZTogJzI0cHgnLFxuICBmb250V2VpZ2h0OiAxMDAsXG4gIGZpbGw6ICcjZmZmZmZmJ1xufVxuXG5jb25zdCB0ZXh0X3N0eWxlID0ge1xuICBmb250OiAnTGF0bycsXG4gIGZvbnRTaXplOiAnMThweCcsXG4gIGZvbnRXZWlnaHQ6IDEwMCxcbiAgZmlsbDogJyNmZmZmZmYnLFxuICB3b3JkV3JhcDogdHJ1ZSxcbiAgd29yZFdyYXBXaWR0aDogNDMwXG59XG5cbmNvbnN0IGJ1dHRvbl9zdHlsZV9vdmVyID0ge1xuICBmb250OiAnTGF0bycsXG4gIGZvbnRTaXplOiAnMjhweCcsXG4gIGZvbnRXZWlnaHQ6IDEwMCxcbiAgZmlsbDogQ09MT1Jcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXQge1xuICBwcmVsb2FkICgpIHtcbiAgICB0aGlzLnRpYyA9IHRoaXMuZ2FtZS5hZGQuYXVkaW8oJ3RpYycpXG4gICAgdGhpcy50aWMudm9sdW1lID0gMC4yXG4gIH1cblxuICBjcmVhdGUgKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5hZGQudGV4dChcbiAgICAgIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJYLFxuICAgICAgdGhpcy5nYW1lLndvcmxkLmNlbnRlclkgLSAxMDAsXG4gICAgICAnUyAgIFkgICBOICAgQyAgIFIgICBPJyxcbiAgICAgIHN0eWxpbmdcbiAgICApXG5cbiAgICBjb25zdCBiYWNrID0gdGhpcy5hZGQudGV4dChcbiAgICAgIHRoaXMuZ2FtZS53b3JsZC53aWR0aCAtIDEwMCxcbiAgICAgIDQwLFxuICAgICAgJ2IgYSBjIGsnLFxuICAgICAgYnV0dG9uX3N0eWxlXG4gICAgKVxuXG4gICAgY29uc3QgY2MgPSB0aGlzLmFkZC50ZXh0KFxuICAgICAgMzAsXG4gICAgICAyNTAsXG4gICAgICBgQXNzZXRzIGxpY2Vuc2VkIHVuZGVyIENyZWF0aXZlIENvbW1vbnM6XG4gICAgICBCeSBBdHRyaWJ1dGlvbiAzLjAgTGljZW5zZSAoY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvKVxuXG4gICAgICAtIFwiUmhpbm9jZXJvc1wiIEtldmluIE1hY0xlb2QgKGluY29tcGV0ZWNoLmNvbSlcbiAgICAgIC0gXCJrb3JncG9seTgwMGJzIEM2XCIgcGF0Y2hlbiAoZnJlZXNvdW5kLm9yZylcbiAgICAgIC0gXCJNdXRlIEljb25cIiBWaXN1YWwgUGhhcm0gKGljb25zOC5jb20pXG4gICAgICAtIFwiTWVkaXVtLCB2b2x1bWUgaWNvblwiIFZpc3VhbCBQaGFybSAoaWNvbnM4LmNvbSlgLFxuICAgICAgdGV4dF9zdHlsZVxuICAgIClcblxuICAgIHRoaXMuYWRkLnRleHQoXG4gICAgICA0NTAsXG4gICAgICAyNTAsXG4gICAgICBgQ29weXJpZ2h0IMKpIDIwMTZcblxuICAgICAgQnJlbm8gRnJlaXRhcyAoYnJlbm8uaW8pXG4gICAgICBFZHVhcmRvIFJvY2hhIChAcm9tYW9uZWxlcylgLFxuICAgICAgdGV4dF9zdHlsZV8yXG4gICAgKVxuXG4gICAgYmFjay5pbnB1dEVuYWJsZWQgPSB0cnVlXG4gICAgYmFjay5pbnB1dC51c2VIYW5kQ3Vyc29yID0gdHJ1ZVxuXG4gICAgYmFjay5ldmVudHMub25JbnB1dERvd24uYWRkKCgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuc3RhcnQoJ3NwbGFzaCcsIHRydWUsIGZhbHNlKVxuICAgIH0pXG5cbiAgICBiYWNrLmV2ZW50cy5vbklucHV0T3Zlci5hZGQoKCkgPT4ge1xuICAgICAgYmFjay5zZXRTdHlsZShidXR0b25fc3R5bGVfb3ZlcilcbiAgICAgIHRoaXMudGljLnBsYXkoKVxuICAgIH0pXG5cbiAgICBiYWNrLmV2ZW50cy5vbklucHV0T3V0LmFkZCgoKSA9PiB7XG4gICAgICBiYWNrLnNldFN0eWxlKGJ1dHRvbl9zdHlsZSlcbiAgICB9KVxuXG4gICAgdGl0bGUuYW5jaG9yLnNldFRvKDAuNSlcbiAgICBiYWNrLmFuY2hvci5zZXRUbygwLjUpXG4gIH1cbn1cbiJdfQ==
},{"../../json/game.json":19}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var COLOR = require('../../json/game.json').bg;

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {}
  }, {
    key: 'create',
    value: function create() {
      this.game.stage.backgroundColor = COLOR;
      this.state.start('preload', true, false, this.data);
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvQm9vdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsRUFBRSxDQUFBOztJQUUzQixJQUFJO1dBQUosSUFBSTswQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUNmLG1CQUFHLEVBQ1Y7OztXQUVNLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQTtBQUN2QyxVQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDcEQ7OztTQVBrQixJQUFJOzs7cUJBQUosSUFBSSIsImZpbGUiOiIvVXNlcnMvYnJlbm9saW1hZGVmcmVpdGFzL3N5bmNyby9zcmMvanMvc3RhdGVzL0Jvb3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDT0xPUiA9IHJlcXVpcmUoJy4uLy4uL2pzb24vZ2FtZS5qc29uJykuYmdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vdCB7XG4gIHByZWxvYWQgKCkge1xuICB9XG5cbiAgY3JlYXRlICgpIHtcbiAgICB0aGlzLmdhbWUuc3RhZ2UuYmFja2dyb3VuZENvbG9yID0gQ09MT1JcbiAgICB0aGlzLnN0YXRlLnN0YXJ0KCdwcmVsb2FkJywgdHJ1ZSwgZmFsc2UsIHRoaXMuZGF0YSlcbiAgfVxufVxuIl19
},{"../../json/game.json":19}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _worldWorld = require('../world/World');

var _worldWorld2 = _interopRequireDefault(_worldWorld);

var _uiUI = require('../ui/UI');

var _uiUI2 = _interopRequireDefault(_uiUI);

var _elementsPlayer = require('../elements/Player');

var _elementsPlayer2 = _interopRequireDefault(_elementsPlayer);

var _elementsRail = require('../elements/Rail');

var _elementsRail2 = _interopRequireDefault(_elementsRail);

var _elementsMaze = require('../elements/Maze');

var _elementsMaze2 = _interopRequireDefault(_elementsMaze);

var BASE_VELOCITY = 100;

var Game = (function (_World) {
  _inherits(Game, _World);

  function Game() {
    _classCallCheck(this, Game);

    _get(Object.getPrototypeOf(Game.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Game, [{
    key: 'create',
    value: function create() {
      _get(Object.getPrototypeOf(Game.prototype), 'create', this).call(this);

      this.game.stage.disableVisibilityChange = true;

      this.ui = new _uiUI2['default'](this);

      this.main = 0;

      this.VELOCITY = 100;

      this.ELAPSED = 0;

      this.rails = [new _elementsRail2['default'](this), new _elementsRail2['default'](this, false)];

      this.players = [new _elementsPlayer2['default'](this, this.rails[0].basis), new _elementsPlayer2['default'](this, this.rails[1].basis, false)];

      this.maze = new _elementsMaze2['default'](this);

      this.TUTORIAL = this.data && this.data.tutorial;

      if (this.TUTORIAL) {
        this.ui.tutorial();
      } else {
        this.start();
      }
    }
  }, {
    key: 'start',
    value: function start() {
      this.maze.accelerate();
      this.music.play();
      this.START = this.game.time.now;
    }
  }, {
    key: 'update',
    value: function update() {
      _get(Object.getPrototypeOf(Game.prototype), 'update', this).call(this);

      this.game.physics.arcade.collide(this.players[0], this.rails[0].RB);
      this.game.physics.arcade.collide(this.players[0], this.rails[0].LB);
      this.game.physics.arcade.collide(this.players[1], this.rails[1].RB);
      this.game.physics.arcade.collide(this.players[1], this.rails[1].LB);

      if (this.TUTORIAL) {
        return this.ui.update();
      }

      var DIFF = parseInt((this.game.time.now - this.START) / 1000);

      if (DIFF === this.ELAPSED + 3) {
        this.maze.accelerate();
        this.ELAPSED = DIFF;
      }

      this.VELOCITY = BASE_VELOCITY + this.ELAPSED * 5;

      this.maze.update();
    }
  }, {
    key: 'lose',
    value: function lose() {
      var TIME = (this.game.time.now - this.START) / 1000;

      this.music.stop();

      this.game.state.start('gameover', true, false, parseInt(TIME));
    }
  }]);

  return Game;
})(_worldWorld2['default']);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvR2FtZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OzBCQUFrQixnQkFBZ0I7Ozs7b0JBQ25CLFVBQVU7Ozs7OEJBQ04sb0JBQW9COzs7OzRCQUN0QixrQkFBa0I7Ozs7NEJBQ2xCLGtCQUFrQjs7OztBQUVuQyxJQUFNLGFBQWEsR0FBRyxHQUFHLENBQUE7O0lBRUosSUFBSTtZQUFKLElBQUk7O1dBQUosSUFBSTswQkFBSixJQUFJOzsrQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUNoQixrQkFBRztBQUNSLGlDQUZpQixJQUFJLHdDQUVQOztBQUVkLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQTs7QUFFOUMsVUFBSSxDQUFDLEVBQUUsR0FBRyxzQkFBTyxJQUFJLENBQUMsQ0FBQTs7QUFFdEIsVUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7O0FBRWIsVUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7O0FBRW5CLFVBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFBOztBQUVoQixVQUFJLENBQUMsS0FBSyxHQUFHLENBQ1gsOEJBQVMsSUFBSSxDQUFDLEVBQ2QsOEJBQVMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUN0QixDQUFBOztBQUVELFVBQUksQ0FBQyxPQUFPLEdBQUcsQ0FDYixnQ0FBVyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDckMsZ0NBQVcsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUM3QyxDQUFBOztBQUVELFVBQUksQ0FBQyxJQUFJLEdBQUcsOEJBQVMsSUFBSSxDQUFDLENBQUE7O0FBRTFCLFVBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQTs7QUFFL0MsVUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2pCLFlBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUE7T0FDbkIsTUFBTTtBQUNMLFlBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtPQUNiO0tBQ0Y7OztXQUVLLGlCQUFHO0FBQ1AsVUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtBQUN0QixVQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ2pCLFVBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFBO0tBQ2hDOzs7V0FFTSxrQkFBRztBQUNSLGlDQTFDaUIsSUFBSSx3Q0EwQ1A7O0FBRWQsVUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDbkUsVUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDbkUsVUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDbkUsVUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7O0FBRW5FLFVBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNqQixlQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7T0FDeEI7O0FBRUQsVUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUEsR0FBSSxJQUFJLENBQUMsQ0FBQTs7QUFFL0QsVUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUU7QUFDN0IsWUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtBQUN0QixZQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtPQUNwQjs7QUFFRCxVQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQTs7QUFFaEQsVUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtLQUNuQjs7O1dBRUksZ0JBQUc7QUFDTixVQUFNLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBLEdBQUksSUFBSSxDQUFBOztBQUVyRCxVQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFBOztBQUVqQixVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7S0FDL0Q7OztTQXZFa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL3N0YXRlcy9HYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdvcmxkIGZyb20gJy4uL3dvcmxkL1dvcmxkJ1xuaW1wb3J0IFVJIGZyb20gJy4uL3VpL1VJJ1xuaW1wb3J0IFBsYXllciBmcm9tICcuLi9lbGVtZW50cy9QbGF5ZXInXG5pbXBvcnQgUmFpbCBmcm9tICcuLi9lbGVtZW50cy9SYWlsJ1xuaW1wb3J0IE1hemUgZnJvbSAnLi4vZWxlbWVudHMvTWF6ZSdcblxuY29uc3QgQkFTRV9WRUxPQ0lUWSA9IDEwMFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIGV4dGVuZHMgV29ybGQge1xuICBjcmVhdGUgKCkge1xuICAgIHN1cGVyLmNyZWF0ZSgpXG5cbiAgICB0aGlzLmdhbWUuc3RhZ2UuZGlzYWJsZVZpc2liaWxpdHlDaGFuZ2UgPSB0cnVlXG5cbiAgICB0aGlzLnVpID0gbmV3IFVJKHRoaXMpXG5cbiAgICB0aGlzLm1haW4gPSAwXG5cbiAgICB0aGlzLlZFTE9DSVRZID0gMTAwXG5cbiAgICB0aGlzLkVMQVBTRUQgPSAwXG5cbiAgICB0aGlzLnJhaWxzID0gW1xuICAgICAgbmV3IFJhaWwodGhpcyksXG4gICAgICBuZXcgUmFpbCh0aGlzLCBmYWxzZSlcbiAgICBdXG5cbiAgICB0aGlzLnBsYXllcnMgPSBbXG4gICAgICBuZXcgUGxheWVyKHRoaXMsIHRoaXMucmFpbHNbMF0uYmFzaXMpLFxuICAgICAgbmV3IFBsYXllcih0aGlzLCB0aGlzLnJhaWxzWzFdLmJhc2lzLCBmYWxzZSlcbiAgICBdXG5cbiAgICB0aGlzLm1hemUgPSBuZXcgTWF6ZSh0aGlzKVxuXG4gICAgdGhpcy5UVVRPUklBTCA9IHRoaXMuZGF0YSAmJiB0aGlzLmRhdGEudHV0b3JpYWxcblxuICAgIGlmICh0aGlzLlRVVE9SSUFMKSB7XG4gICAgICB0aGlzLnVpLnR1dG9yaWFsKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCgpXG4gICAgfVxuICB9XG5cbiAgc3RhcnQgKCkge1xuICAgIHRoaXMubWF6ZS5hY2NlbGVyYXRlKClcbiAgICB0aGlzLm11c2ljLnBsYXkoKVxuICAgIHRoaXMuU1RBUlQgPSB0aGlzLmdhbWUudGltZS5ub3dcbiAgfVxuXG4gIHVwZGF0ZSAoKSB7XG4gICAgc3VwZXIudXBkYXRlKClcblxuICAgIHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5jb2xsaWRlKHRoaXMucGxheWVyc1swXSwgdGhpcy5yYWlsc1swXS5SQilcbiAgICB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuY29sbGlkZSh0aGlzLnBsYXllcnNbMF0sIHRoaXMucmFpbHNbMF0uTEIpXG4gICAgdGhpcy5nYW1lLnBoeXNpY3MuYXJjYWRlLmNvbGxpZGUodGhpcy5wbGF5ZXJzWzFdLCB0aGlzLnJhaWxzWzFdLlJCKVxuICAgIHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5jb2xsaWRlKHRoaXMucGxheWVyc1sxXSwgdGhpcy5yYWlsc1sxXS5MQilcblxuICAgIGlmICh0aGlzLlRVVE9SSUFMKSB7XG4gICAgICByZXR1cm4gdGhpcy51aS51cGRhdGUoKVxuICAgIH1cblxuICAgIGNvbnN0IERJRkYgPSBwYXJzZUludCgodGhpcy5nYW1lLnRpbWUubm93IC0gdGhpcy5TVEFSVCkgLyAxMDAwKVxuXG4gICAgaWYgKERJRkYgPT09IHRoaXMuRUxBUFNFRCArIDMpIHtcbiAgICAgIHRoaXMubWF6ZS5hY2NlbGVyYXRlKClcbiAgICAgIHRoaXMuRUxBUFNFRCA9IERJRkZcbiAgICB9XG5cbiAgICB0aGlzLlZFTE9DSVRZID0gQkFTRV9WRUxPQ0lUWSArIHRoaXMuRUxBUFNFRCAqIDVcblxuICAgIHRoaXMubWF6ZS51cGRhdGUoKVxuICB9XG5cbiAgbG9zZSAoKSB7XG4gICAgY29uc3QgVElNRSA9ICh0aGlzLmdhbWUudGltZS5ub3cgLSB0aGlzLlNUQVJUKSAvIDEwMDBcblxuICAgIHRoaXMubXVzaWMuc3RvcCgpXG5cbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ2dhbWVvdmVyJywgdHJ1ZSwgZmFsc2UsIHBhcnNlSW50KFRJTUUpKVxuICB9XG59XG4iXX0=
},{"../elements/Maze":2,"../elements/Player":3,"../elements/Rail":4,"../ui/UI":16,"../world/World":18}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var COLOR = require('../../json/game.json').active.player;

var styling = {
  font: 'Lato',
  fontSize: '72px',
  fontWeight: 100,
  fill: '#ffffff'
};

var button_style = {
  font: 'Lato',
  fontSize: '30px',
  fontWeight: 100,
  fill: '#ffffff'
};

var button_style_over = {
  font: 'Lato',
  fontSize: '30px',
  fontWeight: 100,
  fill: COLOR
};

var score_style = {
  font: 'Lato',
  fontSize: '200px',
  fontWeight: 100,
  fill: COLOR
};

var GameOver = (function () {
  function GameOver() {
    _classCallCheck(this, GameOver);
  }

  _createClass(GameOver, [{
    key: 'preload',
    value: function preload() {
      this.gameover = this.game.add.audio('gameover');
      this.tic = this.game.add.audio('tic');
      this.tic.volume = 0.2;
    }
  }, {
    key: 'create',
    value: function create() {
      var _this = this;

      this.gameover.play();

      this.title = this.add.text(this.game.world.centerX, this.game.world.centerY - 150, 'G a m e  O v e r', styling);

      this.score = this.add.text(this.game.world.centerX, this.game.world.centerY + 20, this.time + '\'', score_style);

      this.again = this.add.text(this.game.world.centerX, this.game.world.centerY + 180, 'T r y  A g a i n', button_style);

      this.again.inputEnabled = true;
      this.again.input.useHandCursor = true;

      this.again.events.onInputDown.add(function () {
        _this.state.start('game', true, false);
      });

      this.again.events.onInputOver.add(function () {
        _this.again.setStyle(button_style_over);
        _this.tic.play();
      });

      this.again.events.onInputOut.add(function () {
        _this.again.setStyle(button_style);
      });

      this.title.anchor.setTo(0.5);
      this.again.anchor.setTo(0.5);
      this.score.anchor.setTo(0.5);
    }
  }, {
    key: 'init',
    value: function init(time) {
      this.time = time;
    }
  }]);

  return GameOver;
})();

exports['default'] = GameOver;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvR2FtZU92ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7O0FBRTNELElBQU0sT0FBTyxHQUFHO0FBQ2QsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxTQUFTO0NBQ2hCLENBQUE7O0FBRUQsSUFBTSxZQUFZLEdBQUc7QUFDbkIsTUFBSSxFQUFFLE1BQU07QUFDWixVQUFRLEVBQUUsTUFBTTtBQUNoQixZQUFVLEVBQUUsR0FBRztBQUNmLE1BQUksRUFBRSxTQUFTO0NBQ2hCLENBQUE7O0FBRUQsSUFBTSxpQkFBaUIsR0FBRztBQUN4QixNQUFJLEVBQUUsTUFBTTtBQUNaLFVBQVEsRUFBRSxNQUFNO0FBQ2hCLFlBQVUsRUFBRSxHQUFHO0FBQ2YsTUFBSSxFQUFFLEtBQUs7Q0FDWixDQUFBOztBQUVELElBQU0sV0FBVyxHQUFHO0FBQ2xCLE1BQUksRUFBRSxNQUFNO0FBQ1osVUFBUSxFQUFFLE9BQU87QUFDakIsWUFBVSxFQUFFLEdBQUc7QUFDZixNQUFJLEVBQUUsS0FBSztDQUNaLENBQUE7O0lBRW9CLFFBQVE7V0FBUixRQUFROzBCQUFSLFFBQVE7OztlQUFSLFFBQVE7O1dBQ25CLG1CQUFHO0FBQ1QsVUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDL0MsVUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDckMsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO0tBQ3RCOzs7V0FFTSxrQkFBRzs7O0FBQ1IsVUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTs7QUFFcEIsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUM3QixrQkFBa0IsRUFDbEIsT0FBTyxDQUNSLENBQUE7O0FBRUQsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxFQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksRUFDaEIsV0FBVyxDQUNaLENBQUE7O0FBRUQsVUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUM3QixrQkFBa0IsRUFDbEIsWUFBWSxDQUNiLENBQUE7O0FBRUQsVUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO0FBQzlCLFVBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUE7O0FBRXJDLFVBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBTTtBQUN0QyxjQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtPQUN0QyxDQUFDLENBQUE7O0FBRUYsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFNO0FBQ3RDLGNBQUssS0FBSyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBQ3RDLGNBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO09BQ2hCLENBQUMsQ0FBQTs7QUFFRixVQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQU07QUFDckMsY0FBSyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFBO09BQ2xDLENBQUMsQ0FBQTs7QUFFRixVQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDNUIsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzVCLFVBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUM3Qjs7O1dBRUksY0FBQyxJQUFJLEVBQUU7QUFDVixVQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtLQUNqQjs7O1NBdERrQixRQUFROzs7cUJBQVIsUUFBUSIsImZpbGUiOiIvVXNlcnMvYnJlbm9saW1hZGVmcmVpdGFzL3N5bmNyby9zcmMvanMvc3RhdGVzL0dhbWVPdmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ09MT1IgPSByZXF1aXJlKCcuLi8uLi9qc29uL2dhbWUuanNvbicpLmFjdGl2ZS5wbGF5ZXJcblxuY29uc3Qgc3R5bGluZyA9IHtcbiAgZm9udDogJ0xhdG8nLFxuICBmb250U2l6ZTogJzcycHgnLFxuICBmb250V2VpZ2h0OiAxMDAsXG4gIGZpbGw6ICcjZmZmZmZmJ1xufVxuXG5jb25zdCBidXR0b25fc3R5bGUgPSB7XG4gIGZvbnQ6ICdMYXRvJyxcbiAgZm9udFNpemU6ICczMHB4JyxcbiAgZm9udFdlaWdodDogMTAwLFxuICBmaWxsOiAnI2ZmZmZmZidcbn1cblxuY29uc3QgYnV0dG9uX3N0eWxlX292ZXIgPSB7XG4gIGZvbnQ6ICdMYXRvJyxcbiAgZm9udFNpemU6ICczMHB4JyxcbiAgZm9udFdlaWdodDogMTAwLFxuICBmaWxsOiBDT0xPUlxufVxuXG5jb25zdCBzY29yZV9zdHlsZSA9IHtcbiAgZm9udDogJ0xhdG8nLFxuICBmb250U2l6ZTogJzIwMHB4JyxcbiAgZm9udFdlaWdodDogMTAwLFxuICBmaWxsOiBDT0xPUlxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lT3ZlciB7XG4gIHByZWxvYWQgKCkge1xuICAgIHRoaXMuZ2FtZW92ZXIgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdnYW1lb3ZlcicpXG4gICAgdGhpcy50aWMgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCd0aWMnKVxuICAgIHRoaXMudGljLnZvbHVtZSA9IDAuMlxuICB9XG5cbiAgY3JlYXRlICgpIHtcbiAgICB0aGlzLmdhbWVvdmVyLnBsYXkoKVxuXG4gICAgdGhpcy50aXRsZSA9IHRoaXMuYWRkLnRleHQoXG4gICAgICB0aGlzLmdhbWUud29ybGQuY2VudGVyWCxcbiAgICAgIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJZIC0gMTUwLFxuICAgICAgJ0cgYSBtIGUgIE8gdiBlIHInLFxuICAgICAgc3R5bGluZ1xuICAgIClcblxuICAgIHRoaXMuc2NvcmUgPSB0aGlzLmFkZC50ZXh0KFxuICAgICAgdGhpcy5nYW1lLndvcmxkLmNlbnRlclgsXG4gICAgICB0aGlzLmdhbWUud29ybGQuY2VudGVyWSArIDIwLFxuICAgICAgdGhpcy50aW1lICsgJ1xcJycsXG4gICAgICBzY29yZV9zdHlsZVxuICAgIClcblxuICAgIHRoaXMuYWdhaW4gPSB0aGlzLmFkZC50ZXh0KFxuICAgICAgdGhpcy5nYW1lLndvcmxkLmNlbnRlclgsXG4gICAgICB0aGlzLmdhbWUud29ybGQuY2VudGVyWSArIDE4MCxcbiAgICAgICdUIHIgeSAgQSBnIGEgaSBuJyxcbiAgICAgIGJ1dHRvbl9zdHlsZVxuICAgIClcblxuICAgIHRoaXMuYWdhaW4uaW5wdXRFbmFibGVkID0gdHJ1ZVxuICAgIHRoaXMuYWdhaW4uaW5wdXQudXNlSGFuZEN1cnNvciA9IHRydWVcblxuICAgIHRoaXMuYWdhaW4uZXZlbnRzLm9uSW5wdXREb3duLmFkZCgoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlLnN0YXJ0KCdnYW1lJywgdHJ1ZSwgZmFsc2UpXG4gICAgfSlcblxuICAgIHRoaXMuYWdhaW4uZXZlbnRzLm9uSW5wdXRPdmVyLmFkZCgoKSA9PiB7XG4gICAgICB0aGlzLmFnYWluLnNldFN0eWxlKGJ1dHRvbl9zdHlsZV9vdmVyKVxuICAgICAgdGhpcy50aWMucGxheSgpXG4gICAgfSlcblxuICAgIHRoaXMuYWdhaW4uZXZlbnRzLm9uSW5wdXRPdXQuYWRkKCgpID0+IHtcbiAgICAgIHRoaXMuYWdhaW4uc2V0U3R5bGUoYnV0dG9uX3N0eWxlKVxuICAgIH0pXG5cbiAgICB0aGlzLnRpdGxlLmFuY2hvci5zZXRUbygwLjUpXG4gICAgdGhpcy5hZ2Fpbi5hbmNob3Iuc2V0VG8oMC41KVxuICAgIHRoaXMuc2NvcmUuYW5jaG9yLnNldFRvKDAuNSlcbiAgfVxuXG4gIGluaXQgKHRpbWUpIHtcbiAgICB0aGlzLnRpbWUgPSB0aW1lXG4gIH1cbn1cbiJdfQ==
},{"../../json/game.json":19}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var About = (function () {
  function About() {
    _classCallCheck(this, About);
  }

  _createClass(About, [{
    key: 'create',
    value: function create() {
      var _this = this;

      this.game.stage.backgroundColor = '#2D4548';

      var logo = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'kraiom');

      logo.anchor.setTo(0.5);

      setTimeout(function () {
        return _this.state.start('splash', true, false);
      }, 3000);
    }
  }]);

  return About;
})();

exports['default'] = About;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvS3JhaW9tLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUIsS0FBSztXQUFMLEtBQUs7MEJBQUwsS0FBSzs7O2VBQUwsS0FBSzs7V0FDakIsa0JBQUc7OztBQUNSLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUE7O0FBRTNDLFVBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFDdkIsUUFBUSxDQUNULENBQUE7O0FBRUQsVUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7O0FBRXRCLGdCQUFVLENBQUM7ZUFBTSxNQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7T0FBQSxFQUFFLElBQUksQ0FBQyxDQUFBO0tBQ2hFOzs7U0Fia0IsS0FBSzs7O3FCQUFMLEtBQUsiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL3N0YXRlcy9LcmFpb20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBBYm91dCB7XG4gIGNyZWF0ZSAoKSB7XG4gICAgdGhpcy5nYW1lLnN0YWdlLmJhY2tncm91bmRDb2xvciA9ICcjMkQ0NTQ4J1xuXG4gICAgY29uc3QgbG9nbyA9IHRoaXMuYWRkLnNwcml0ZShcbiAgICAgIHRoaXMuZ2FtZS53b3JsZC5jZW50ZXJYLFxuICAgICAgdGhpcy5nYW1lLndvcmxkLmNlbnRlclksXG4gICAgICAna3JhaW9tJ1xuICAgIClcblxuICAgIGxvZ28uYW5jaG9yLnNldFRvKDAuNSlcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zdGF0ZS5zdGFydCgnc3BsYXNoJywgdHJ1ZSwgZmFsc2UpLCAzMDAwKVxuICB9XG59XG4iXX0=
},{}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      var styling = {
        font: 'Lato',
        fontSize: '72px',
        fontWeight: 100,
        fill: '#ffffff'
      };

      this.loading = this.add.text(this.game.world.centerX, this.game.world.centerY + 10, 'L o a d i n g . . .', styling);

      this.loading.anchor.setTo(0.5);

      this.loadSprites();
      this.loadAudios();
    }
  }, {
    key: 'init',
    value: function init(data) {
      this.data = data;
    }
  }, {
    key: 'create',
    value: function create() {
      this.state.start('kraiom', true, false);
    }

    /*
      "Mute Icon" and "Medium, volume icon" Visual Pharm (icons8.com)
      Licensed under Creative Commons: By Attribution 3.0 License
      http://creativecommons.org/licenses/by/3.0/
    */

  }, {
    key: 'loadSprites',
    value: function loadSprites() {
      this.load.image('on', 'assets/img/on.png');
      this.load.image('off', 'assets/img/off.png');
      this.load.image('kraiom', 'assets/img/kraiom.png');
    }

    /*
      "Rhinoceros" Kevin MacLeod (incompetech.com)
      Licensed under Creative Commons: By Attribution 3.0 License
      http://creativecommons.org/licenses/by/3.0/
       "korgpoly800bs C6" patchen (freesound.org)
      Licensed under Creative Commons: By Attribution 3.0 License
      http://creativecommons.org/licenses/by/3.0/
    */

  }, {
    key: 'loadAudios',
    value: function loadAudios() {
      var _this = this;

      var audios = ['Rhinoceros', 'syncro', 'gameover', 'tic'];

      audios.forEach(function (name) {
        _this.load.audio(name, ['assets/audio/' + name + '.aac', 'assets/audio/' + name + '.ogg']);
      });
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvUHJlbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLE9BQU87V0FBUCxPQUFPOzBCQUFQLE9BQU87OztlQUFQLE9BQU87O1dBQ2xCLG1CQUFHO0FBQ1QsVUFBSSxPQUFPLEdBQUc7QUFDWixZQUFJLEVBQUUsTUFBTTtBQUNaLGdCQUFRLEVBQUUsTUFBTTtBQUNoQixrQkFBVSxFQUFFLEdBQUc7QUFDZixZQUFJLEVBQUUsU0FBUztPQUNoQixDQUFBOztBQUVELFVBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsRUFDNUIscUJBQXFCLEVBQ3JCLE9BQU8sQ0FDUixDQUFBOztBQUVELFVBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFOUIsVUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2xCLFVBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtLQUNsQjs7O1dBRUksY0FBQyxJQUFJLEVBQUU7QUFDVixVQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtLQUNqQjs7O1dBRU0sa0JBQUc7QUFDUixVQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0tBQ3hDOzs7Ozs7Ozs7O1dBUVcsdUJBQUc7QUFDYixVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtBQUMxQyxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtBQUM1QyxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtLQUNuRDs7Ozs7Ozs7Ozs7OztXQVlVLHNCQUFHOzs7QUFDWixVQUFJLE1BQU0sR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFBOztBQUV4RCxZQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ3JCLGNBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsbUJBQ0osSUFBSSw2QkFDSixJQUFJLFVBQ3JCLENBQUMsQ0FBQTtPQUNILENBQUMsQ0FBQTtLQUNIOzs7U0E3RGtCLE9BQU87OztxQkFBUCxPQUFPIiwiZmlsZSI6Ii9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy9zdGF0ZXMvUHJlbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWQge1xuICBwcmVsb2FkICgpIHtcbiAgICBsZXQgc3R5bGluZyA9IHtcbiAgICAgIGZvbnQ6ICdMYXRvJyxcbiAgICAgIGZvbnRTaXplOiAnNzJweCcsXG4gICAgICBmb250V2VpZ2h0OiAxMDAsXG4gICAgICBmaWxsOiAnI2ZmZmZmZidcbiAgICB9XG5cbiAgICB0aGlzLmxvYWRpbmcgPSB0aGlzLmFkZC50ZXh0KFxuICAgICAgdGhpcy5nYW1lLndvcmxkLmNlbnRlclgsXG4gICAgICB0aGlzLmdhbWUud29ybGQuY2VudGVyWSArIDEwLFxuICAgICAgJ0wgbyBhIGQgaSBuIGcgLiAuIC4nLFxuICAgICAgc3R5bGluZ1xuICAgIClcblxuICAgIHRoaXMubG9hZGluZy5hbmNob3Iuc2V0VG8oMC41KVxuXG4gICAgdGhpcy5sb2FkU3ByaXRlcygpXG4gICAgdGhpcy5sb2FkQXVkaW9zKClcbiAgfVxuXG4gIGluaXQgKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhXG4gIH1cblxuICBjcmVhdGUgKCkge1xuICAgIHRoaXMuc3RhdGUuc3RhcnQoJ2tyYWlvbScsIHRydWUsIGZhbHNlKVxuICB9XG5cbiAgLypcbiAgICBcIk11dGUgSWNvblwiIGFuZCBcIk1lZGl1bSwgdm9sdW1lIGljb25cIiBWaXN1YWwgUGhhcm0gKGljb25zOC5jb20pXG4gICAgTGljZW5zZWQgdW5kZXIgQ3JlYXRpdmUgQ29tbW9uczogQnkgQXR0cmlidXRpb24gMy4wIExpY2Vuc2VcbiAgICBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvXG4gICovXG5cbiAgbG9hZFNwcml0ZXMgKCkge1xuICAgIHRoaXMubG9hZC5pbWFnZSgnb24nLCAnYXNzZXRzL2ltZy9vbi5wbmcnKVxuICAgIHRoaXMubG9hZC5pbWFnZSgnb2ZmJywgJ2Fzc2V0cy9pbWcvb2ZmLnBuZycpXG4gICAgdGhpcy5sb2FkLmltYWdlKCdrcmFpb20nLCAnYXNzZXRzL2ltZy9rcmFpb20ucG5nJylcbiAgfVxuXG4gIC8qXG4gICAgXCJSaGlub2Nlcm9zXCIgS2V2aW4gTWFjTGVvZCAoaW5jb21wZXRlY2guY29tKVxuICAgIExpY2Vuc2VkIHVuZGVyIENyZWF0aXZlIENvbW1vbnM6IEJ5IEF0dHJpYnV0aW9uIDMuMCBMaWNlbnNlXG4gICAgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wL1xuXG4gICAgXCJrb3JncG9seTgwMGJzIEM2XCIgcGF0Y2hlbiAoZnJlZXNvdW5kLm9yZylcbiAgICBMaWNlbnNlZCB1bmRlciBDcmVhdGl2ZSBDb21tb25zOiBCeSBBdHRyaWJ1dGlvbiAzLjAgTGljZW5zZVxuICAgIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMC9cbiAgKi9cblxuICBsb2FkQXVkaW9zICgpIHtcbiAgICBsZXQgYXVkaW9zID0gWydSaGlub2Nlcm9zJywgJ3N5bmNybycsICdnYW1lb3ZlcicsICd0aWMnXVxuXG4gICAgYXVkaW9zLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICB0aGlzLmxvYWQuYXVkaW8obmFtZSwgW1xuICAgICAgICBgYXNzZXRzL2F1ZGlvLyR7bmFtZX0uYWFjYCxcbiAgICAgICAgYGFzc2V0cy9hdWRpby8ke25hbWV9Lm9nZ2BcbiAgICAgIF0pXG4gICAgfSlcbiAgfVxufVxuIl19
},{}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var COLOR = require('../../json/game.json').active.player;
var BG = require('../../json/game.json').bg;

var styling = {
  font: 'Lato',
  fontSize: '72px',
  fontWeight: 100,
  fill: '#ffffff'
};

var button_style = {
  font: 'Lato',
  fontSize: '28px',
  fontWeight: 100,
  fill: '#ffffff'
};

var button_style_over = {
  font: 'Lato',
  fontSize: '28px',
  fontWeight: 100,
  fill: COLOR
};

var Splash = (function () {
  function Splash() {
    _classCallCheck(this, Splash);
  }

  _createClass(Splash, [{
    key: 'preload',
    value: function preload() {
      this.tic = this.game.add.audio('tic');
      this.syncro = this.game.add.audio('syncro');
      this.tic.volume = 0.2;
      this.game.stage.backgroundColor = BG;
    }
  }, {
    key: 'create',
    value: function create() {
      var _this = this;

      this.title = this.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'S   Y   N   C   R   O', styling);

      this.start = this.add.text(this.game.world.centerX, this.game.world.centerY + 70, 'S t a r t', button_style);

      this.tutorial = this.add.text(this.game.world.centerX, this.game.world.centerY + 120, 'T u t o r i a l', button_style);

      this.credits = this.add.text(this.game.world.centerX, this.game.world.centerY + 170, 'A b o u t', button_style);

      this.start.inputEnabled = true;
      this.start.input.useHandCursor = true;

      this.start.events.onInputDown.add(function () {
        _this.state.start('game', true, false);
      });

      this.start.events.onInputOver.add(function () {
        _this.start.setStyle(button_style_over);
        _this.tic.play();
      });

      this.start.events.onInputOut.add(function () {
        _this.start.setStyle(button_style);
      });

      this.tutorial.inputEnabled = true;
      this.tutorial.input.useHandCursor = true;

      this.tutorial.events.onInputDown.add(function () {
        _this.state.start('game', true, false, {
          tutorial: true
        });
      });

      this.tutorial.events.onInputOver.add(function () {
        _this.tutorial.setStyle(button_style_over);
        _this.tic.play();
      });

      this.tutorial.events.onInputOut.add(function () {
        _this.tutorial.setStyle(button_style);
      });

      this.credits.inputEnabled = true;
      this.credits.input.useHandCursor = true;

      this.credits.events.onInputDown.add(function () {
        _this.state.start('about', true, false);
      });

      this.credits.events.onInputOver.add(function () {
        _this.credits.setStyle(button_style_over);
        _this.tic.play();
      });

      this.credits.events.onInputOut.add(function () {
        _this.credits.setStyle(button_style);
      });

      this.title.anchor.setTo(0.5);
      this.start.anchor.setTo(0.5);
      this.credits.anchor.setTo(0.5);
      this.tutorial.anchor.setTo(0.5);

      this.syncro.play();
    }
  }]);

  return Splash;
})();

exports['default'] = Splash;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../json/game.json":19}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TUT = require('../../json/game.json').tutorial;

// context should be "this.context"
var CHALLENGES = [function () {
  return this.PRESSED.left && this.PRESSED.right;
}, function () {
  return this.PRESSED.space;
}, function () {
  return this.game.time.now - this.START >= 3000;
}];

var style = {
  font: 'Lato',
  fontSize: '30px',
  fontWeight: 100,
  fill: '#ffffff',
  wordWrap: true,
  wordWrapWidth: 150,
  textAlign: 'center'
};

var UI = (function () {
  function UI(context) {
    var _this = this;

    _classCallCheck(this, UI);

    this.context = context;

    this.sound = context.game.add.sprite(context.game.world.width - 40, 40, context.music.mute ? 'off' : 'on');

    this.sound.scale.setTo(0.4);

    this.sound.inputEnabled = true;
    this.sound.input.useHandCursor = true;
    this.sound.anchor.setTo(0.5);

    this.sound.events.onInputDown.add(function () {
      context.music.mute = !context.music.mute;

      _this.sound.loadTexture(context.music.mute ? 'off' : 'on');
    });

    this.CURRENT = 0;
  }

  _createClass(UI, [{
    key: 'tutorial',
    value: function tutorial() {
      this.text = this.context.add.text(this.context.rails[0].T.x, 50, TUT[this.CURRENT], style);

      this.sound.visible = false;

      this.text.anchor.setTo(0.5, 0);
    }
  }, {
    key: 'update',
    value: function update() {
      if (!CHALLENGES[this.CURRENT].call(this.context)) {
        return;
      }

      if (++this.CURRENT === TUT.length) {
        return this._start();
      }

      this.text.x = this.context.rails[1].T.x;
      this.text.setText(TUT[this.CURRENT]);

      this.context.START = this.context.game.time.now;
    }
  }, {
    key: '_start',
    value: function _start() {
      this.text.visible = false;
      this.sound.visible = true;
      this.context.TUTORIAL = false;
      this.context.start();
    }
  }]);

  return UI;
})();

exports['default'] = UI;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy91aS9VSS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsUUFBUSxDQUFBOzs7QUFHcEQsSUFBTSxVQUFVLEdBQUcsQ0FDakIsWUFBWTtBQUNWLFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUE7Q0FDL0MsRUFFRCxZQUFZO0FBQ1YsU0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQTtDQUMxQixFQUVELFlBQVk7QUFDVixTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQTtDQUMvQyxDQUNGLENBQUE7O0FBRUQsSUFBTSxLQUFLLEdBQUc7QUFDWixNQUFJLEVBQUUsTUFBTTtBQUNaLFVBQVEsRUFBRSxNQUFNO0FBQ2hCLFlBQVUsRUFBRSxHQUFHO0FBQ2YsTUFBSSxFQUFFLFNBQVM7QUFDZixVQUFRLEVBQUUsSUFBSTtBQUNkLGVBQWEsRUFBRSxHQUFHO0FBQ2xCLFdBQVMsRUFBRSxRQUFRO0NBQ3BCLENBQUE7O0lBRW9CLEVBQUU7QUFDVCxXQURPLEVBQUUsQ0FDUixPQUFPLEVBQUU7OzswQkFESCxFQUFFOztBQUVuQixRQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTs7QUFFdEIsUUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQzdCLEVBQUUsRUFDRixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUNsQyxDQUFBOztBQUVELFFBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFM0IsUUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO0FBQzlCLFFBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUE7QUFDckMsUUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBOztBQUU1QixRQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQU07QUFDdEMsYUFBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQTs7QUFFeEMsWUFBSyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUMxRCxDQUFDLENBQUE7O0FBRUYsUUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUE7R0FDakI7O2VBdkJrQixFQUFFOztXQXlCWixvQkFBRztBQUNWLFVBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN6QixFQUFFLEVBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDakIsS0FBSyxDQUNOLENBQUE7O0FBRUQsVUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBOztBQUUxQixVQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQy9COzs7V0FFTSxrQkFBRztBQUNSLFVBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDaEQsZUFBTTtPQUNQOztBQUVELFVBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxLQUFLLEdBQUcsQ0FBQyxNQUFNLEVBQUU7QUFDakMsZUFBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7T0FDckI7O0FBRUQsVUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QyxVQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7O0FBRXBDLFVBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUE7S0FDaEQ7OztXQUVNLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO0FBQ3pCLFVBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtBQUN6QixVQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7QUFDN0IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtLQUNyQjs7O1NBMURrQixFQUFFOzs7cUJBQUYsRUFBRSIsImZpbGUiOiIvVXNlcnMvYnJlbm9saW1hZGVmcmVpdGFzL3N5bmNyby9zcmMvanMvdWkvVUkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUVVQgPSByZXF1aXJlKCcuLi8uLi9qc29uL2dhbWUuanNvbicpLnR1dG9yaWFsXG5cbi8vIGNvbnRleHQgc2hvdWxkIGJlIFwidGhpcy5jb250ZXh0XCJcbmNvbnN0IENIQUxMRU5HRVMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5QUkVTU0VELmxlZnQgJiYgdGhpcy5QUkVTU0VELnJpZ2h0XG4gIH0sXG5cbiAgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLlBSRVNTRUQuc3BhY2VcbiAgfSxcblxuICBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2FtZS50aW1lLm5vdyAtIHRoaXMuU1RBUlQgPj0gMzAwMFxuICB9XG5dXG5cbmNvbnN0IHN0eWxlID0ge1xuICBmb250OiAnTGF0bycsXG4gIGZvbnRTaXplOiAnMzBweCcsXG4gIGZvbnRXZWlnaHQ6IDEwMCxcbiAgZmlsbDogJyNmZmZmZmYnLFxuICB3b3JkV3JhcDogdHJ1ZSxcbiAgd29yZFdyYXBXaWR0aDogMTUwLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJIHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQpIHtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0XG5cbiAgICB0aGlzLnNvdW5kID0gY29udGV4dC5nYW1lLmFkZC5zcHJpdGUoXG4gICAgICBjb250ZXh0LmdhbWUud29ybGQud2lkdGggLSA0MCxcbiAgICAgIDQwLFxuICAgICAgY29udGV4dC5tdXNpYy5tdXRlID8gJ29mZicgOiAnb24nXG4gICAgKVxuXG4gICAgdGhpcy5zb3VuZC5zY2FsZS5zZXRUbygwLjQpXG5cbiAgICB0aGlzLnNvdW5kLmlucHV0RW5hYmxlZCA9IHRydWVcbiAgICB0aGlzLnNvdW5kLmlucHV0LnVzZUhhbmRDdXJzb3IgPSB0cnVlXG4gICAgdGhpcy5zb3VuZC5hbmNob3Iuc2V0VG8oMC41KVxuXG4gICAgdGhpcy5zb3VuZC5ldmVudHMub25JbnB1dERvd24uYWRkKCgpID0+IHtcbiAgICAgIGNvbnRleHQubXVzaWMubXV0ZSA9ICFjb250ZXh0Lm11c2ljLm11dGVcblxuICAgICAgdGhpcy5zb3VuZC5sb2FkVGV4dHVyZShjb250ZXh0Lm11c2ljLm11dGUgPyAnb2ZmJyA6ICdvbicpXG4gICAgfSlcblxuICAgIHRoaXMuQ1VSUkVOVCA9IDBcbiAgfVxuXG4gIHR1dG9yaWFsICgpIHtcbiAgICB0aGlzLnRleHQgPSB0aGlzLmNvbnRleHQuYWRkLnRleHQoXG4gICAgICB0aGlzLmNvbnRleHQucmFpbHNbMF0uVC54LFxuICAgICAgNTAsXG4gICAgICBUVVRbdGhpcy5DVVJSRU5UXSxcbiAgICAgIHN0eWxlXG4gICAgKVxuXG4gICAgdGhpcy5zb3VuZC52aXNpYmxlID0gZmFsc2VcblxuICAgIHRoaXMudGV4dC5hbmNob3Iuc2V0VG8oMC41LCAwKVxuICB9XG5cbiAgdXBkYXRlICgpIHtcbiAgICBpZiAoIUNIQUxMRU5HRVNbdGhpcy5DVVJSRU5UXS5jYWxsKHRoaXMuY29udGV4dCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICgrK3RoaXMuQ1VSUkVOVCA9PT0gVFVULmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0KClcbiAgICB9XG5cbiAgICB0aGlzLnRleHQueCA9IHRoaXMuY29udGV4dC5yYWlsc1sxXS5ULnhcbiAgICB0aGlzLnRleHQuc2V0VGV4dChUVVRbdGhpcy5DVVJSRU5UXSlcblxuICAgIHRoaXMuY29udGV4dC5TVEFSVCA9IHRoaXMuY29udGV4dC5nYW1lLnRpbWUubm93XG4gIH1cblxuICBfc3RhcnQgKCkge1xuICAgIHRoaXMudGV4dC52aXNpYmxlID0gZmFsc2VcbiAgICB0aGlzLnNvdW5kLnZpc2libGUgPSB0cnVlXG4gICAgdGhpcy5jb250ZXh0LlRVVE9SSUFMID0gZmFsc2VcbiAgICB0aGlzLmNvbnRleHQuc3RhcnQoKVxuICB9XG59XG4iXX0=
},{"../../json/game.json":19}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var KEYS = ['LEFT', 'RIGHT'];

var Input = (function () {
  function Input(context) {
    _classCallCheck(this, Input);

    this.context = context;

    this.cursors = context.game.input.keyboard.createCursorKeys();

    this.space = context.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

    this.space.onDown.add(this.context.on_spacebar_down, context);
  }

  _createClass(Input, [{
    key: 'update',
    value: function update() {
      var _this = this;

      KEYS.forEach(function (name) {
        if (_this.context.game.input.keyboard.isDown(Phaser.Keyboard[name])) {
          _this.context['on_' + name.toLowerCase() + '_down']();
        }
      });
    }
  }]);

  return Input;
})();

exports['default'] = Input;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy93b3JsZC9JbnB1dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBTSxJQUFJLEdBQUcsQ0FDWCxNQUFNLEVBQ04sT0FBTyxDQUNSLENBQUE7O0lBRW9CLEtBQUs7QUFDWixXQURPLEtBQUssQ0FDWCxPQUFPLEVBQUU7MEJBREgsS0FBSzs7QUFFdEIsUUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7O0FBRXRCLFFBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUE7O0FBRTdELFFBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBOztBQUV6RSxRQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQTtHQUM5RDs7ZUFUa0IsS0FBSzs7V0FXakIsa0JBQUc7OztBQUNSLFVBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLEVBQUk7QUFDbkIsWUFBSSxNQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQ2xFLGdCQUFLLE9BQU8sU0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLFdBQVEsRUFBRSxDQUFBO1NBQ2hEO09BQ0YsQ0FBQyxDQUFBO0tBQ0g7OztTQWpCa0IsS0FBSzs7O3FCQUFMLEtBQUsiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL3dvcmxkL0lucHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgS0VZUyA9IFtcbiAgJ0xFRlQnLFxuICAnUklHSFQnXG5dXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0IHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQpIHtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0XG5cbiAgICB0aGlzLmN1cnNvcnMgPSBjb250ZXh0LmdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpXG5cbiAgICB0aGlzLnNwYWNlID0gY29udGV4dC5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU1BBQ0VCQVIpXG5cbiAgICB0aGlzLnNwYWNlLm9uRG93bi5hZGQodGhpcy5jb250ZXh0Lm9uX3NwYWNlYmFyX2Rvd24sIGNvbnRleHQpXG4gIH1cblxuICB1cGRhdGUgKCkge1xuICAgIEtFWVMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHQuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oUGhhc2VyLktleWJvYXJkW25hbWVdKSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbYG9uXyR7bmFtZS50b0xvd2VyQ2FzZSgpfV9kb3duYF0oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==
},{}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _Input = require('./Input');

var _Input2 = _interopRequireDefault(_Input);

var VELOCITY = 250;

var World = (function () {
  function World() {
    _classCallCheck(this, World);
  }

  _createClass(World, [{
    key: 'create',
    value: function create() {
      this.game.physics.startSystem(Phaser.Physics.ARCADE);

      if (!this.music) {
        this.music = this.game.add.audio('Rhinoceros');
        this.music.loop = true;
      }

      this.input = new _Input2['default'](this);

      this.PRESSED = {
        left: false,
        right: false,
        space: false
      };
    }
  }, {
    key: 'init',
    value: function init(data) {
      this.data = data;
    }
  }, {
    key: 'update',
    value: function update() {
      this.players[0].body.velocity.x = 0;
      this.players[1].body.velocity.x = 0;

      this.input.update();
    }
  }, {
    key: 'on_left_down',
    value: function on_left_down() {
      this.PRESSED.left = true;

      var i = this.players[0].active ? 0 : 1;

      this.players[i].body.velocity.x = -VELOCITY;
    }
  }, {
    key: 'on_right_down',
    value: function on_right_down() {
      this.PRESSED.right = true;

      var i = this.players[0].active ? 0 : 1;

      this.players[i].body.velocity.x = VELOCITY;
    }
  }, {
    key: 'on_spacebar_down',
    value: function on_spacebar_down() {
      this.PRESSED.space = true;

      this.main = (this.main + 1) % 2;

      this.players[0].swap();
      this.players[1].swap();

      this.rails[0].swap();
      this.rails[1].swap();

      this.maze.swap();
    }
  }]);

  return World;
})();

exports['default'] = World;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmVub2xpbWFkZWZyZWl0YXMvc3luY3JvL3NyYy9qcy93b3JsZC9Xb3JsZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7cUJBQWtCLFNBQVM7Ozs7QUFFM0IsSUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFBOztJQUVDLEtBQUs7V0FBTCxLQUFLOzBCQUFMLEtBQUs7OztlQUFMLEtBQUs7O1dBQ2pCLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7O0FBRXBELFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2YsWUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDOUMsWUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO09BQ3ZCOztBQUVELFVBQUksQ0FBQyxLQUFLLEdBQUcsdUJBQVUsSUFBSSxDQUFDLENBQUE7O0FBRTVCLFVBQUksQ0FBQyxPQUFPLEdBQUc7QUFDYixZQUFJLEVBQUUsS0FBSztBQUNYLGFBQUssRUFBRSxLQUFLO0FBQ1osYUFBSyxFQUFFLEtBQUs7T0FDYixDQUFBO0tBQ0Y7OztXQUVJLGNBQUMsSUFBSSxFQUFFO0FBQ1YsVUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7S0FDakI7OztXQUVNLGtCQUFHO0FBQ1IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDbkMsVUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7O0FBRW5DLFVBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUE7S0FDcEI7OztXQUVZLHdCQUFHO0FBQ2QsVUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBOztBQUV4QixVQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBOztBQUV4QyxVQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFBO0tBQzVDOzs7V0FFYSx5QkFBRztBQUNmLFVBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTs7QUFFekIsVUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTs7QUFFeEMsVUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUE7S0FDM0M7OztXQUVnQiw0QkFBRztBQUNsQixVQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7O0FBRXpCLFVBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQTs7QUFFL0IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUN0QixVQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBOztBQUV0QixVQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ3BCLFVBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7O0FBRXBCLFVBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDakI7OztTQXpEa0IsS0FBSzs7O3FCQUFMLEtBQUsiLCJmaWxlIjoiL1VzZXJzL2JyZW5vbGltYWRlZnJlaXRhcy9zeW5jcm8vc3JjL2pzL3dvcmxkL1dvcmxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElucHV0IGZyb20gJy4vSW5wdXQnXG5cbmNvbnN0IFZFTE9DSVRZID0gMjUwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmxkIHtcbiAgY3JlYXRlICgpIHtcbiAgICB0aGlzLmdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5BUkNBREUpXG5cbiAgICBpZiAoIXRoaXMubXVzaWMpIHtcbiAgICAgIHRoaXMubXVzaWMgPSB0aGlzLmdhbWUuYWRkLmF1ZGlvKCdSaGlub2Nlcm9zJylcbiAgICAgIHRoaXMubXVzaWMubG9vcCA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLmlucHV0ID0gbmV3IElucHV0KHRoaXMpXG5cbiAgICB0aGlzLlBSRVNTRUQgPSB7XG4gICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgIHJpZ2h0OiBmYWxzZSxcbiAgICAgIHNwYWNlOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGluaXQgKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhXG4gIH1cblxuICB1cGRhdGUgKCkge1xuICAgIHRoaXMucGxheWVyc1swXS5ib2R5LnZlbG9jaXR5LnggPSAwXG4gICAgdGhpcy5wbGF5ZXJzWzFdLmJvZHkudmVsb2NpdHkueCA9IDBcblxuICAgIHRoaXMuaW5wdXQudXBkYXRlKClcbiAgfVxuXG4gIG9uX2xlZnRfZG93biAoKSB7XG4gICAgdGhpcy5QUkVTU0VELmxlZnQgPSB0cnVlXG5cbiAgICBjb25zdCBpID0gdGhpcy5wbGF5ZXJzWzBdLmFjdGl2ZSA/IDAgOiAxXG5cbiAgICB0aGlzLnBsYXllcnNbaV0uYm9keS52ZWxvY2l0eS54ID0gLVZFTE9DSVRZXG4gIH1cblxuICBvbl9yaWdodF9kb3duICgpIHtcbiAgICB0aGlzLlBSRVNTRUQucmlnaHQgPSB0cnVlXG5cbiAgICBjb25zdCBpID0gdGhpcy5wbGF5ZXJzWzBdLmFjdGl2ZSA/IDAgOiAxXG5cbiAgICB0aGlzLnBsYXllcnNbaV0uYm9keS52ZWxvY2l0eS54ID0gVkVMT0NJVFlcbiAgfVxuXG4gIG9uX3NwYWNlYmFyX2Rvd24gKCkge1xuICAgIHRoaXMuUFJFU1NFRC5zcGFjZSA9IHRydWVcblxuICAgIHRoaXMubWFpbiA9ICh0aGlzLm1haW4gKyAxKSAlIDJcblxuICAgIHRoaXMucGxheWVyc1swXS5zd2FwKClcbiAgICB0aGlzLnBsYXllcnNbMV0uc3dhcCgpXG5cbiAgICB0aGlzLnJhaWxzWzBdLnN3YXAoKVxuICAgIHRoaXMucmFpbHNbMV0uc3dhcCgpXG5cbiAgICB0aGlzLm1hemUuc3dhcCgpXG4gIH1cbn1cbiJdfQ==
},{"./Input":17}],19:[function(require,module,exports){
module.exports={
  "name": "syncro",
  "width": 800,
  "height": 500,
  "INIT_PADDLES": 30,
  "active": {
    "border": "#9D4000",
    "trails": "#E56502",
    "player": "#d4d224"
  },
  "deactivated": {
    "border": "#454545",
    "trails": "#A39C9C",
    "player": "#ffffff"
  },
  "tutorial": [
    "Press the arrow keys to move LEFT and RIGHT",
    "Press the SPACEBAR to change the main trails",
    "Avoid any obstacle in BOTH trails. Good luck!"
  ],
  "bg": "#2A2524",
  "borderB": ["#F6EAD5", "#d4b463"],
  "borderA": ["#d4b463", "#F6EAD5"],
  "trailA":  ["#2A2524", "#2A2524"],
  "trailB":  ["#2A2524", "#2A2524"],
  "playerB": ["#F6EAD5", "#d4b463"],
  "playerA": ["#d4b463", "#F6EAD5"],
  "_trailA":  ["#E56502", "#A39C9C"],
  "_trailB":  ["#A39C9C", "#E56502"]
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
